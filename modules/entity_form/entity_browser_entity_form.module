<?php

use \Drupal\entity_browser\Events\Events;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_inline_entity_form_reference_form_alter().
 */
function entity_browser_entity_form_inline_entity_form_reference_form_alter(&$reference_form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  $entity_manager = \Drupal::entityManager();
  \Drupal::service('event_dispatcher')
    ->addListener(
      Events::REGISTER_JS_CALLBACKS,
      'entity_browser_entity_form_reference_register_js'
    );

  /** @var \Drupal\field\FieldConfigInterface $instance */
  $instance = $form_state->get(['inline_entity_form', $reference_form['#ief_id'], 'instance']);

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $entity_form_id = $instance->getTargetEntityTypeId() . '.' . $instance->getTargetBundle() . '.default';
  // TODO - 'default' might become configurable or something else in the future.
  // See https://www.drupal.org/node/2510274
  $form_display = $entity_manager->getStorage('entity_form_display')->load($entity_form_id);

  $widget = $form_display->getComponent($instance->getName());

  if (!empty($widget['third_party_settings']['entity_browser']['entity_browser_id'])) {
    $entity_browser_id = $widget['third_party_settings']['entity_browser']['entity_browser_id'];
    if ($browser = $entity_manager->getStorage('entity_browser')->load($entity_browser_id)) {
      /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
      $display = $browser->getDisplay();

      $reference_form['entity_id'] = [
        '#type' => 'hidden',
        '#attributes' => [
          'class' => ['ief-entity-browser-value'],
        ],
      ];
      $reference_form['entity_browser'] = $display->displayEntityBrowser();
      $reference_form['#attached']['library'][] = 'entity_browser_entity_form/ief_autocomplete';
      $reference_form['actions']['ief_reference_save']['#ajax']['event'] = 'entities-selected';

      // Add custom validation and submit callbacks as we need to handle
      // multi-value cases.
      $reference_form['#element_validate'][0] = 'entity_browser_entity_form_reference_form_validate';
      $reference_form['#ief_element_submit'][0] = 'entity_browser_entity_form_reference_form_submit';

      // Add cardinality for this widget so that we can handle it later.
      $reference_form['#attached']['drupalSettings']['entity_browser'][$display->getUuid()]['cardinality'] = $instance->getFieldStorageDefinition()->getCardinality();
    }
  }
}

/**
 * Registers JS callback that gets entities from entity browser and updates
 * form values accordingly.
 */
function entity_browser_entity_form_reference_register_js(\Drupal\entity_browser\Events\RegisterJSCallbacks $event) {
  $event->registerCallback('Drupal.entityBrowser.selectionCompleted');
}

/**
 * Validates the form for adding existing entities.
 *
 * TODO see if we can get away without overriding entire IEF function.
 *
 * @see inline_entity_form_reference_form_validate()
 *
 * @param $reference_form
 *  The reference entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function entity_browser_entity_form_reference_form_validate(&$reference_form, FormStateInterface $form_state) {
  $triggering_element = $form_state->getTriggeringElement();
  if (strpos($triggering_element['#name'], 'ief-reference-submit') === FALSE) {
    return;
  }

  $ief_id = $reference_form['#ief_id'];
  $entity_type = $reference_form['#entity_type'];
  $parents_path = implode('][', $reference_form['#parents']);

  $instance = $form_state->get(['inline_entity_form', $ief_id, 'instance']);
  $target_type = $instance->getFieldStorageDefinition()->getSetting('target_type');
  /** @var \Drupal\inline_entity_form\InlineEntityFormHandlerInterface $handler */
  $handler = \Drupal::entityManager()->getHandler($target_type, 'inline_form');
  $labels = $handler->labels();

  $form_values = NestedArray::getValue($form_state->getValues(), $reference_form['#parents']);
  $attach_entities = \Drupal::entityManager()->getStorage($entity_type)->loadMultiple(explode(' ', $form_values['entity_id']));

  // Check to see if entity is already referenced by current IEF widget
  if (!empty($attach_entities)) {
    foreach ($attach_entities as $attach_entity) {
      foreach ($form_state->get(['inline_entity_form', $ief_id, 'entities']) as $key => $value) {
        if ($value['entity'] == $attach_entity) {
          $form_state->setErrorByName($parents_path . '][existing_entity', t('The selected @label has already been added.', array('@label' => $labels['singular'])));
        }
      }
    }
  }
  else {
    $form_state->setErrorByName($parents_path . '][existing_entity', t('The selected @label is not valid.', array('@label' => $labels['singular'])));
  }
}

/**
 * Submits the form for adding existing entities.
 *
 * Adds the specified entity to the IEF form state.
 *
 * TODO see if we can get away without overriding entire IEF function.
 *
 * @see inline_entity_form_reference_form_submit()
 *
 * @param $reference_form
 *  The reference entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function entity_browser_entity_form_reference_form_submit($reference_form, FormStateInterface $form_state) {
  $ief_id = $reference_form['#ief_id'];
  $entity_type = $reference_form['#entity_type'];

  $form_values = NestedArray::getValue($form_state->getValues(), $reference_form['#parents']);
  $attach_entities = \Drupal::entityManager()->getStorage($entity_type)->loadMultiple(explode(' ', $form_values['entity_id']));

  // Determine the correct weight of the new element.
  $weight = 0;
  if ($form_state->has(['inline_entity_form', $ief_id, 'entities', 0])) {
    $weight = max(
        array_map(
          function ($item) { return intval($item['_weight']); },
          $form_state->get(['inline_entity_form', $ief_id, 'entities'])
        )
      );
    $weight++;
  }

  $entities =& $form_state->get(['inline_entity_form', $ief_id, 'entities']);
  foreach ($attach_entities as $attach_entity) {
    $entities[] = array(
      'entity' => $attach_entity,
      '_weight' => $weight,
      'form' => NULL,
      'needs_save' => FALSE,
    );
    $weight++;
  }
  $form_state->set(['inline_entity_form', $ief_id, 'entities'], $entities);

  // In some rare cases entity_id keeps values of selected entities which then
  // causes problems in subsequent selections. Let's make sure it is empty and
  // ready for next usage of entity browser.
  $form_state->setValueForElement($reference_form['entity_id'], '');

  // Statement above should be enough in normal cases, but with IEF we have two
  // form states. If we don't remove submitted values from unprocessed array
  // Drupal still sets #value in some cases. Let's prevent that.
  $input = &$form_state->getUserInput();
  NestedArray::unsetValue($input, array_merge($reference_form['#parents'], ['entity_id']));
}
